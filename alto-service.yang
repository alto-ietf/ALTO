module alto-service {
  namespace "http://shixiao.org/alto-service";
  prefix "alto";
  description "Data Model for ALTO (RFC7285)";
  revision 2014-09-22 {
    description "Initial revision w/ endpoint properties";
  }
  
  container map-service {
    /* ref: Michaels yang file */
  }
  
  typedef endpoint-address {
    type TypedEndpointAddr;
    description 
      "An endpoint is an application or host that is capable of 
       communicating (sending and/or receiving messages) on a network. An 
       endpoint is typically either a resource provider or a resource.";
  }

  typedef TypedEndpointAddr {
    type string {
      pattern ".*:.*";
    }
  }
  
  /* TODO: EndpointPrefix, EndpointAddrGroup */

  grouping PID {
    description
      "Provider Defined Identifier";
    leaf PIDName {
      type string;
    }
    leaf-list endpoint-addresses {
      type endpoint-address;
    }
  }
  
  grouping network-location {
    uses PID;
  }
  
  // TODO: enforce these logic
  // TODO: priv:
  typedef endpoint-property-type {
    type union {
      type resource-specific-endpoint-property-type;
      type global-endpoint-property-type;
    }
  }

  typedef resource-specific-endpoint-property-type {
    type string {
      pattern ".*\..*"; // resource-id.property-type
    }
  }

  typedef global-endpoint-property-type {
    type enumeration {
      enum pid;
      enum network-location;
      // other examples here
    }
  }

  typedef endpoint-property-value {
    type string;
  }

  rpc endpoint-property-service {
    description
      "inquiries on properties of an endpoint";
    input {
      leaf-list endpoints {
        type endpoint-address;
      }
      list properties {
        leaf endpoint-property {
          type endpoint-property-type;
        }
      }
    }
    
    output {
      list meta {
        list dependent-vtags{
          leaf resource-id {
            type string;
          }
          leaf tag {
            type string;
          }
        }
      }
      list endpoint-properties {
        leaf pid {
          type endpoint-address;
        }
        list properties {
          leaf property-type {
            type union {
              type resource-specific-endpoint-property-type;
              type global-endpoint-property-type;
            }
          }
          leaf property-value {
            type endpoint-property-value;
          }
        }
      }
    }
  }
  
  rpc endpoint-cost-service {
    /* ref: Michaels yang file; maybe as rpc */
  }
  
  
  rpc map-filtering-service {
    /* TODO */
  }
  
}