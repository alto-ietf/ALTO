module alto-service {
  yang-version 1;
  
  namespace "urn:ietf:params:xml:ns:yang:alto-service";
  // replace with IANA namespace when assigned

  prefix "as";

  import ietf-inet-types {
    prefix inet;
  }

  // currently unused
  import ietf-yang-types {
    prefix yang;
  }

  organization "TBD";
  contact "WILL-BE-DEFINED-LATER";

  description 
    "This module defines a model for the ALTO service
     based on draft-ietf-alto-protocol-27.";
  
  revision 2014-09-24 {
    description "Initial revision. betw Michael and Xiao";
  }
  
  // Type definitions

  typedef endpoint-address {
    type union {
      type TypedEndpointAddr;
      type inet:ipv4-address;
      type inet:ipv6-address;
    }
    description
      "Endpoint address, either IPv4 or Ipv6.";
  }

  typedef TypedEndpointAddr {
    type string {
      pattern ".*:.*";
      // TODO: restrict the second half of the address. See TODO.txt
      // for explanation of difficulty.
    }
  }

  typedef endpoint-address-type {
    type enumeration {
      enum ipv4;
      enum ipv6;
      enum MAC;
      enum overlay-ID;
      // other examples here;
    }
  }
  
  typedef EndpointPrefix {
    type inet:ip-prefix;
  }
  
  grouping EndpointAddrGroup {
    description
      "An endpoint address group is defined as:
       object-map {
         AddressType -> EndpointPrefix<0..*>;
       } EndpointAddrGroup;";
    leaf AddressType {
      type endpoint-address-type;
    }
    leaf-list EndpointPrefix {
      type EndpointPrefix;
    }
  }

  grouping endpoint-addresses {
    leaf-list endpoints {
      type endpoint-address;
      description
        "The leaf list identifies endpoints.";
    }
  }

  typedef network-location {
    type union {
      type inet:ipv4-prefix;
      type inet:ipv6-prefix;
      type inet:ipv4-address;
      type inet:ipv6-address;
    }
    description
      "Network location, either IPv4 or Ipv6.";
  }

  grouping network-locations {
    leaf-list locations {
      type network-location;
      description
        "The leaf list identifies network locations.";
    }
  }

  typedef pid-name {
    type string {
      length "1..64";
      // RFC 7285, Section 10.1. Note: the '.' separator MUST NOT be
      // used unless specifically indicated in RFC7285 or an extension
      // document.
      pattern "^[\w\-:@\.]*$";
    }
    description
      "Name for the PID.";
  }

  grouping pid-locations {
    leaf name {
      type pid-name;
      description
        "Name for the PID, must be unique.";
    }
    uses network-locations;
    description
      "PID representation.";
  }


  typedef cost-metric {
    type enumeration {
      enum routingcost {
        value "0";
        description
          "Default metric.";
      }
      enum hopcount {
        value "1";
        description
        "Hopcount metric.";
      }
    }
    description
      "Cost metric.";
  }

  typedef cost-mode {
    type enumeration {
      enum numerical {
        value "0";
        description
          "Numerical cost mode.";
      }
      enum ordinal {
        value "1";
        description
          "Ordinal cost mode.";
      }
    }
    description
      "Cost mode.";
  }

  grouping cost-type {
    leaf cost-metric {
      type cost-metric;
      description
        "Cost metric.";
    }
    leaf cost-mode {
      type cost-mode;
      description
        "Cost mode.";
    }
    description
      "Cost type.";
  }

  // TODO: enforce these logic
  // TODO: priv:
  typedef endpoint-property-type {
    type union {
      type resource-specific-endpoint-property-type;
      type global-endpoint-property-type;
    }
  }

  typedef resource-specific-endpoint-property-type {
    type string {
      pattern ".*\..*"; // resource-id.property-type
    }
  }

  typedef global-endpoint-property-type {
    type enumeration {
      enum pid {
        value "0";
        description
          "PID property.";
      }
      enum network-location;
      // other examples here
    }
  }

  typedef endpoint-property-value {
    type string;
  }

  typedef resource-id {
    type string { // TODO: Reference?
      length "1..64";
      pattern "^[\w\-:@\.]*$";
    }
    description
      "Resource-ID.";
  }

  grouping version-tag {
    leaf resource-id {
      type resource-id;
    }
    leaf tag {
      type string {
        length "1..64";
      }
      description
        "Tag.";
    }
    description
      "Version tag. Both resource-id and tag must be equal
       byte-for-byte.";
  }

  grouping meta {
    choice is-dependent {
      // multiple vtags
      case dependent {
        list vtags {
          uses version-tag;
          description
            "Version tags.";
        }
      }
      case independent {
        container vtag {
          uses version-tag;
          description
            "Version tag.";
        }
      }
    }
    description
      "Meta information.";
  }

  grouping network-map {
    container meta {
      uses meta;
    }
    list pids {
      uses pid-locations;
      key "name";
      description
        "The list identifies the PID locations.";
    }
    description
      "Network map.";
  }

  typedef alto-cost {
    type decimal64 {
      fraction-digits 6;
    }
    description
      "ALTO costs, currently only integer values.";
  }

  grouping cost-map {
    container meta {
      uses meta;
      container cost-type {
        uses cost-type;
        description
          "Cost type.";
      }
    }
    list srcs {
      leaf src {
        type pid-name;
        description
          "Source PID.";
      }
      key "src";
      list dsts {
        leaf dst {
          type pid-name;
          description
            "Destination PID.";
        }
        key "dst";
        leaf cost {
          type alto-cost;
          description
            "Cost from source to destination.";
        }
        description
          "The list represents the inner part of the cost matrix.";
      }         
      description
        "The list represents the outer part of the cost matrix.";
    }
    description
      "Cost map.";
  }

  // Instances

  container map-service {
    config false;
    list network-map { // TODO: Single network map 
      key "resource-id";
      leaf resource-id {
        type leafref {
          path "../../../IRD/IRD-resource-entries/resource-id";
        }
      }
      uses network-map;
      description
        "Network map service (unfiltered).";
    }
    list cost-map { // TODO: Single cost map and cost type
      key "resource-id";
      leaf resource-id {
        type leafref {
          path "../../../IRD/IRD-resource-entries/resource-id";
        }
      }
      uses cost-map;
      description
        "Cost map service (unfiltered).";
    }
    description
      "Network and cost map service (unfiltered).";
  }

  container IRD {
    container IRD-resource-entries {
      leaf resource-id {
        type resource-id;
      }
      container IRD-resource-entry {
        leaf uri {
          type inet:uri;
        }
        leaf media-type {
          type string {
            // TODO: restrict more? RFC 7285, Sec. 14.1?
            pattern "application/alto-*";
          }
        }
        //TODO: optional entries: accepts/capabilities/uses
      }
    }
  }

  // RPCs
  rpc endpoint-cost-service {
    input {
      container cost-type {
        uses cost-type;
        description
          "Cost type.";
      }
      container endpoints {
        container srcs {
          uses endpoint-addresses;
          description
            "Source endpoint addresses.";
        }
        container dsts {
          uses endpoint-addresses;
          description
            "Destination endpoint addresses.";
        }
        description
          "Endpoint addresses.";
      }
    }
    output {
      container meta {
        uses meta;
        // uses augment to add cost-type fields
        description
          "Meta information.";
      }
      container endpoint-cost-map {
        list srcs {
          leaf src {
            type endpoint-address;
            description
              "Source endpoint address.";
          }
          key "src";
          list dsts {
            leaf dst {
              type endpoint-address;
              description
                  "Destination endpoint address.";
            }
            key "dst";
            leaf cost {
              type alto-cost;
                description
                  "Cost from source to destination.";
            }
            description
              "The list represents the inner part of the cost matrix.";
          }
          description
            "The list represents the outer part of the cost matrix.";
        }
        description
          "Endpoint-cost-map.";
      }
    }
  }

  rpc endpoint-property-service {
    description
      "inquiries on properties of an endpoint";
    input {
      leaf-list endpoints {
        type endpoint-address;
      }
      list properties {
        leaf endpoint-property {
          type endpoint-property-type;
        }
      }
    }
    
    output {
      container meta {
        uses meta;
      }
      list endpoint-properties {
        leaf pid {
          type endpoint-address;
        }
        list properties {
          leaf property-type {
            type union {
              type resource-specific-endpoint-property-type;
              type global-endpoint-property-type;
            }
          }
          leaf property-value {
            type endpoint-property-value;
          }
        }
      }
    }
  }
  
  rpc filtered-network-map-service {
    description
      "inquiries on filtered network map";
    input {
      container endpoints {
        container srcs {
          leaf-list endpoints {
            type endpoint-address;
          }
          leaf-list address-types {
            type endpoint-address-type;
          }
        }
        container dsts {
          leaf-list endpoints {
            type endpoint-address;
          }
          leaf-list address-types {
            type endpoint-address-type;
          }
        }
      }
    }
    output {
      container meta {
        uses meta;
      }
      // restrict the returned pids
      list network-map {
        leaf pid {
          type endpoint-address;
          description
            "must be present in the input srcs or dsts";
        }
        list neighbors {
          leaf neighbor-address {
            type endpoint-address;
          }
          leaf neighbor-address-type {
            type endpoint-address-type;
          }
        }
      }
    }
  }

  rpc filtered-endpoint-cost-service {
    input {
      container cost-type {
        uses cost-type;
        description
          "Cost type.";
      }
      container endpoint-filters {
        container srcs {
          uses endpoint-addresses;
          description
            "Source endpoint addresses.";
        }
        container dsts {
          uses endpoint-addresses;
          description
            "Destination endpoint addresses.";
        }
        description
          "Endpoint addresses.";
      }
      // TODO: optional constraint JSON strings RFC7285 Sec. 11.3.2.3
    }
    output {
      container meta {
        uses meta;
        description
          "Meta information.";
      }
      container endpoint-cost-map {
        list srcs {
          leaf src {
            type endpoint-address;
            description
              "Source endpoint address.";
          }
          key "src";
          list dsts {
            leaf dst {
              type endpoint-address;
              description
                  "Destination endpoint address.";
            }
            key "dst";
            leaf cost {
              type alto-cost;
                description
                  "Cost from source to destination.";
            }
            description
              "The list represents the inner part of the cost matrix.";
          }
          description
            "The list represents the outer part of the cost matrix.";
        }
        description
          "Endpoint-cost-map.";
      }
    }
  }

  augment "/endpoint-cost-service/output/meta" {
    container cost-type {
      uses cost-type;
      description
        "Cost type.";
    }
  }

  augment "/filtered-endpoint-cost-service/output/meta" {
    container cost-type {
      uses cost-type;
      description
        "Cost type.";
    }
  }

  augment "/IRD-request/output/meta" {
    container cost-types {
      uses cost-type;
      description
        "Cost type.";
    }
    leaf default-alto-network-map {
      type leafref {
        path "../../../../IRD/IRD-resource-entries/resource-id";
      }
    }
  }


  rpc IRD-request {
    input {
      // TODO: change this
      leaf request {
        type string;
      }
    }
    output {
      container meta {
        uses meta;
      }

      list resources  {
        key "resource-id";
        leaf resource-id {
          type leafref {
            path "../../../../IRD/IRD-resource-entries/resource-id";
          }
        }
        container resource {
          leaf uri {
            type inet:uri;
          }
          leaf media-type {
            type string {
              // TODO: restrict more? RFC 7285, Sec. 14.1?
              pattern "application/alto-*";
            }
          }
        }
      }
    }
  }

}