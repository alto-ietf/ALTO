module alto-service {
  namespace "http://shixiao.org/alto-service";
  prefix "alto";
  description "Data Model for ALTO (RFC7285)";
  revision 2014-09-22 {
    description "Initial revision w/ endpoint properties";
  }
  
  container map-service {
    /* ref: Michaels yang file */
  }
  
  typedef endpoint-address {
    type union {
      type TypedEndpointAddr;
      type UntypedEndpointAddr;
      type EndpointAddrType;
    }
    description 
      "An endpoint is an application or host that is capable of 
       communicating (sending and/or receiving messages) on a network. An 
       endpoint is typically either a resource provider or a resource.";
  }

  typedef TypedEndpointAddr {
    type string {
      pattern ".*:.*";
    }
  }

  typedef UntypedEndpointAddr {
    type string;
  }
  typedef EndpointAddrType {
    type string;
  }
  
  /* TODO
     typedef EndpointPrefix {
     }
     
     typedef EndpointAddrGroup {
     // TODO
     }
  */

  grouping PID {
    description
      "Provider Defined Identifier";
    leaf PIDName {
      type string;
    }
    leaf-list endpoint-addresses {
      type endpoint-address;
    }
  }
  
  grouping network-location {
    uses PID;
  }
  
  typedef endpoint-property-type {
    type enumeration {
      enum resource-specific;
      enum global;
    }
  }
  
  // TODO: enforce these logic
  // TODO: priv:
  typedef endpoint-property {
    type union {
      /*
        choice endpoint-property-type {
        default global;
        case resource-specific {
        type string {
        pattern "*.*";
        // resource ID.global endpoint property name
        }
        }
        case global {
        type string;
        }
        }
      */
      type string; // endpoint-property-type: resource-specific or global
      type enumeration {
        enum pid;
        enum network-location;
        // other examples here
      }
      type string; // endpoint property value
    }
  }
  
  rpc endpoint-property-service {
    description
      "inquiries on properties of an endpoint";
    input {
      leaf-list endpoints {
        type endpoint-address;
      }
      list properties {
        leaf endpoint-property {
          type endpoint-property;
        }
      }
    }
    
    output {
      list meta {
        list dependent-vtags{
          leaf resource-id {
            type string;
          }
          leaf tag {
            type string;
          }
        }
      }
      list endpoint-properties {
        leaf pid {
          type endpoint-address;
        }
        list properties {
          leaf property {
            type endpoint-property;
          }
        }
      }
    }
  }
  
  rpc endpoint-cost-service {
    /* ref: Michaels yang file; maybe as rpc */
  }
  
  
  rpc map-filtering-service {
    /* TODO */
  }
  
}